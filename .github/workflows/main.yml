name: DVJA DevSecOps Pipeline with SCA

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  security-events: write

jobs:
  dvja-scan:
    runs-on: self-hosted

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Java environment
    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Step 3: Compile the project with Maven
    - name: Build with Maven
      run: mvn clean compile

    # Step 4: Build Docker image 
    - name: Build Docker image
      run: |
        docker build -t dvja:${{ github.sha }} .

    # Step 5: Scan Docker image with Trivy (Container Vulnerabilities)
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: dvja:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'HIGH,CRITICAL'
        ignore-unfixed: true

    # Step 6: Upload Trivy container scan results to GitHub Security tab
    - name: Upload Trivy container scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-container-results.sarif'
        category: "container-scan"  # Unique category for container scan

    # Step 7: Scan project dependencies with Trivy (SCA)
    - name: Scan filesystem for SCA vulnerabilities with Trivy
      run: |
        trivy fs --format sarif --output trivy-sca-results.sarif --severity HIGH,CRITICAL .

    # Step 8: Upload Trivy SCA scan results to GitHub Security tab
    - name: Upload Trivy SCA scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-sca-results.sarif'
        category: "sca-scan"  # Unique category for SCA scan

    # Step 9: Run SAST scan with SonarQube
    - name: Run SonarQube Scanner
      env:
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        /opt/sonar-scanner/bin/sonar-scanner \
          -Dsonar.projectKey=dvja \
          -Dsonar.sources=. \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
